Microsoft (R) Macro Assembler Version 14.12.25835.0	    03/05/18 23:56:02
Program 5     (program5.asm				     Page 1 - 1


				TITLE Program 5     (program5.asm)

				; Author: Prathyoosha Chaya, chayap@oregonstate.edu
				; Course / Project ID: CS 271 Sec. 001				Due Date: 03/04/2018
				; Description: Assignment 5. This program receives a number from the user for the max number of random 
				;		numbers to generate. It then fills this number of elements with random numbers, sorts it, 
				;		and displays the pre-sorted and sorted values. It finally finds the median value and prints it.
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
				; Constants used:
 = 000000C8			INPUT_MAX		EQU			200					; used to check if inputted value is in range
 = 0000000A			INPUT_MIN		EQU			10	
 = 00000064			LO				EQU			100					; ranges for random numbers
 = 000003E7			HI				EQU			999
 = 00000384			N				EQU			900					; (N = HI - LO + 1). N-1 is used for RandomRange call
 = 0000000A			NUMS_PER_LINE	EQU			10					; numbers per row of display

				; Output messages, all are used globally with exception of display Unsorted and displaySorted
 00000000 53 6F 72 74 69	prompt1			BYTE		"Sorting Random Integers, Programmed by Prathyoosha Chaya", 10, 0
	   6E 67 20 52 61
	   6E 64 6F 6D 20
	   49 6E 74 65 67
	   65 72 73 2C 20
	   50 72 6F 67 72
	   61 6D 6D 65 64
	   20 62 79 20 50
	   72 61 74 68 79
	   6F 6F 73 68 61
	   20 43 68 61 79
	   61 0A 00
 0000003A 54 68 69 73 20	prompt2			BYTE		"This program generates random numbers in the range [100 .. 999], ", 10, 0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   20 5B 31 30 30
	   20 2E 2E 20 39
	   39 39 5D 2C 20
	   0A 00
 0000007D 64 69 73 70 6C	prompt3			BYTE		"displays the original list, sorts the list, and calculates the ", 10, 0
	   61 79 73 20 74
	   68 65 20 6F 72
	   69 67 69 6E 61
	   6C 20 6C 69 73
	   74 2C 20 73 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 2C 20 61
	   6E 64 20 63 61
	   6C 63 75 6C 61
	   74 65 73 20 74
	   68 65 20 0A 00
 000000BE 6D 65 64 69 61	prompt4			BYTE		"median value.  Finally, it displays the list sorted in descending order. ", 10, 0
	   6E 20 76 61 6C
	   75 65 2E 20 20
	   46 69 6E 61 6C
	   6C 79 2C 20 69
	   74 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6C 69 73 74 20
	   73 6F 72 74 65
	   64 20 69 6E 20
	   64 65 73 63 65
	   6E 64 69 6E 67
	   20 6F 72 64 65
	   72 2E 20 0A 00
 00000109 48 6F 77 20 6D	promptNum		BYTE		"How many numbers should be generated? [10 .. 200]: ", 0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 3F 20 5B 31
	   30 20 2E 2E 20
	   32 30 30 5D 3A
	   20 00
 0000013D 4F 75 74 20 6F	promptOoR		BYTE		"Out of range. Please enter a number in [10, 200].", 10, 0
	   66 20 72 61 6E
	   67 65 2E 20 50
	   6C 65 61 73 65
	   20 65 6E 74 65
	   72 20 61 20 6E
	   75 6D 62 65 72
	   20 69 6E 20 5B
	   31 30 2C 20 32
	   30 30 5D 2E 0A
	   00
 00000170 54 68 65 20 75	displayUnsorted	BYTE		"The unsorted random numbers: ", 0
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 3A 20 00
 0000018E 54 68 65 20 6D	medianPrompt	BYTE		"The median is ", 0
	   65 64 69 61 6E
	   20 69 73 20 00
 0000019D 54 68 65 20 73	displaySorted	BYTE		"The sorted list: ", 10, 0
	   6F 72 74 65 64
	   20 6C 69 73 74
	   3A 20 0A 00
 000001B0 54 68 61 74 27	goodbye			BYTE		"That's all. Goodbye!", 10, 0
	   73 20 61 6C 6C
	   2E 20 47 6F 6F
	   64 62 79 65 21
	   0A 00
 000001C6 20 20 20 20 00	spaces			BYTE		"    ", 0
 000001CB 65 76 65 6E 00	test1			BYTE		"even", 0

				; Values/data to be used
 000001D0 00000000		request			DWORD		?					; Holds user-inputted max number of random ints to fill
 000001D4  000000C8 [		arr				DWORD		INPUT_MAX DUP(?)	; Array holding random ints
	    00000000
	   ]
 000004F4 00000000		ooRange			DWORD		0					; out of range flag

 00000000			.code
 00000000			main PROC
 00000000  E8 00000070			call	introduction
					
					; passing request by address to getData
 00000005  68 000001D0 R		push	OFFSET request
 0000000A  E8 00000094			call	getData

					; pass request by value and arr as reference to fillArray
 0000000F  FF 35 000001D0 R		push	request
 00000015  68 000001D4 R		push	OFFSET arr
 0000001A  E8 000000C3			call	fillArray
					
					; DISPLAY UNSORTED: pass request by value, arr as reference, and title by value to displayArray
 0000001F  FF 35 000001D0 R		push	request
 00000025  68 000001D4 R		push	OFFSET arr		
 0000002A  68 00000170 R		push	OFFSET displayUnsorted			
 0000002F  E8 000000D4			call	displayArray

					; pass request by value and arr by reference to sortList
 00000034  FF 35 000001D0 R		push	request
 0000003A  68 000001D4 R		push	OFFSET arr
 0000003F  E8 00000115			call	sortList

					; DISPLAY SORTED: pass request by value, arr as reference, and title by value to displayArray
 00000044  FF 35 000001D0 R		push	request
 0000004A  68 000001D4 R		push	OFFSET arr		
 0000004F  68 0000019D R		push	OFFSET displaySorted			
 00000054  E8 000000AF			call	displayArray

 00000059  FF 35 000001D0 R		push	request
 0000005F  68 000001D4 R		push	OFFSET arr
 00000064  E8 00000135			call	displayMedian

 00000069  E8 0000018C			call	farewell

					exit
 0000006E  6A 00	   *	    push   +000000000h
 00000070  E8 00000000 E   *	    call   ExitProcess
 00000075			main ENDP

				; ------------------------------------------------------
				; introduction
				;
				; Displays introductory statements for user
				; Receives: none.
				; Returns: none.
				; ------------------------------------------------------
 00000075			introduction PROC
 00000075  BA 00000000 R		mov		edx, OFFSET prompt1
 0000007A  E8 00000000 E		call	WriteString
 0000007F  BA 0000003A R		mov		edx, OFFSET prompt2
 00000084  E8 00000000 E		call	WriteString
 00000089  BA 0000007D R		mov		edx, OFFSET prompt3
 0000008E  E8 00000000 E		call	WriteString
 00000093  BA 000000BE R		mov		edx, OFFSET prompt4
 00000098  E8 00000000 E		call	WriteString
 0000009D  E8 00000000 E		call	Crlf

 000000A2  C3				ret
 000000A3			introduction ENDP	

				; ------------------------------------------------------i
				; getData
				;
				; Receives user inputted integer for request, then validates that request is in range [10,200].
				; Receives: @request.
				; Returns: updated request.
				; ------------------------------------------------------
 000000A3			getData PROC
					;pushad
 000000A3  55			    push	ebp											; to save ebp to return to original value later
 000000A4  8B EC			mov		ebp, esp									; set ebp to stack pointer
					;pushad

 000000A6  8B 5D 08			mov		ebx, [ebp + 8]								; mov value of @request to ebx

 000000A9				Begin:
 000000A9  BA 00000109 R			mov		edx, OFFSET promptNum
 000000AE  E8 00000000 E			call	WriteString
 000000B3  E8 00000000 E			call	ReadInt
 000000B8  E8 00000000 E			call	Crlf

						; Compare request to range limits, if not within limits, then preserve value
 000000BD  3D 000000C8				cmp		eax, INPUT_MAX
 000000C2  7F 09				jg		DisplayOoR
 000000C4  83 F8 0A				cmp		eax, INPUT_MIN
 000000C7  7C 04				jl		DisplayOoR
						
 000000C9  89 03				mov     [ebx], eax								; Store eax as value of @ebx (which is @request, or ebp+8)
 000000CB  EB 11				jmp		ExitGetData								; value must be in range, so exit

						; Display out of range
 000000CD				DisplayOoR:
 000000CD  BA 0000013D R			mov		edx, OFFSET promptOoR
 000000D2  E8 00000000 E			call	WriteString
 000000D7  E8 00000000 E			call	Crlf
 000000DC  EB CB				jmp		Begin

 000000DE				ExitGetData:
 000000DE  5D					pop		ebp
 000000DF  C2 0008				ret		8										; return stack with original ebp
 000000E2			getData ENDP


				; ------------------------------------------------------
				; fillArray
				;
				; Fills the array with random integers in the range 
				; Receives: request (by value), array (currently unsorted, by reference).
				; Returns: arr filled with random ints, until index specified by request.
				; ------------------------------------------------------
 000000E2			fillArray PROC
 000000E2  55				push	ebp											; to save ebp to return to original value later
 000000E3  8B EC			mov		ebp, esp									; set ebp to stack pointer
					
 000000E5  8B 4D 0C			mov		ecx, [ebp+12]								; set loop counter to request value
 000000E8  8B 75 08			mov		esi, [ebp+8]								; set esi to base address of arr

 000000EB  E8 00000000 E		call	Randomize									; set random seed based on system clock

 000000F0				FillArr:
 000000F0  B8 00000384				mov		eax, N
 000000F5  E8 00000000 E			call	RandomRange								; uses eax value(N) - 1, thus finds a random int in range [0, 899]
 000000FA  83 C0 64				add		eax, LO									; LO = 100, changes range from [0, 899] to desired [100, 999]
 000000FD  89 06				mov		[esi], eax								; store random int into current arr value
 000000FF  83 C6 04				add		esi, 4									; increment to next element by adding TYPE DWORD
 00000102  E2 EC				loop	FillArr

 00000104				ExitFillArray:
 00000104  5D					pop		ebp
 00000105  C2 0008				ret		8										; return stack with original ebp	
 00000108			fillArray ENDP

				; ------------------------------------------------------
				; displayArray
				;
				; Displays the array (called for both unsortted and sorted array)
				; Receives: request (by value), array (currently unsorted, by reference), and the title (reference).
				; Returns: none.
				; ------------------------------------------------------
 00000108			displayArray PROC
 00000108  55				push	ebp											; to save ebp to return to original value later
 00000109  8B EC			mov		ebp, esp									; set ebp to stack pointer

 0000010B  8B 4D 10			mov		ecx, [ebp+16]								; set loop counter to request value
 0000010E  8B 75 0C			mov		esi, [ebp+12]								; set esi to base address of arr
 00000111  8B 55 08			mov		edx, [ebp+8]								; title value, wither displayUnsorted or displaySorted
 00000114  BB 0000000A			mov		ebx, NUMS_PER_LINE							; column count

 00000119  E8 00000000 E		call	Crlf
 0000011E  E8 00000000 E		call	WriteString									; print the respective title, either sorted or unsorted
 00000123  E8 00000000 E		call	CrLf

 00000128				DisplayElement:
 00000128  8B 06				mov		eax, [esi]								; move currrent arr value to be displayed
 0000012A  E8 00000000 E			call	WriteDec
 0000012F  BA 000001C6 R			mov		edx, OFFSET spaces
 00000134  E8 00000000 E			call	WriteString
 00000139  83 C6 04				add		esi, 4									; look at next element in arr, by adding TYPE DWORD

						; Check if 10th number to print new line
 0000013C  49					dec		ecx
 0000013D  8B C1		        mov		eax, ecx
 0000013F  41					inc		ecx
 00000140  BB 0000000A		        mov		ebx, NUMS_PER_LINE						; divide by max numbers per line (10) by loop count to check mod value stored in edx
 00000145  33 D2		        xor		edx, edx                     
 00000147  F7 F3		        div		ebx										; divides by 10, if R=0 then 10 numbers on line

 00000149  83 FA 00		        cmp		edx, 0									; edx is 0 if there are 10 numbers per line
 0000014C  75 05		        jne		LessThan10								; prints or does not print new line
				          
 0000014E  E8 00000000 E	        call CrLf

 00000153			        LessThan10:
 00000153  E2 D3					loop	DisplayElement

 00000155  5D				pop		ebp
 00000156  C2 0008			ret		8											; return stack with original ebp	
 00000159			displayArray ENDP

				; ------------------------------------------------------
				; sortList
				;
				; Sorts the unsorted array of random ints.
				; Receives: request (by value) and array (currently unsorted, by reference).
				; Returns: arr with sorted ints.
				; ------------------------------------------------------
 00000159			sortList PROC
 00000159  55				push	ebp											; to save ebp to return to original value later
 0000015A  8B EC			mov		ebp, esp									; set ebp to stack pointer

 0000015C  8B 4D 0C			mov		ecx, [ebp+12]								; set loop counter to request value - 1
 0000015F  49				dec		ecx
					
					; This first loop will reset the arr address to compare to the first value, and execute it's inner loop until request-1 elements are reached.
 00000160				ResetLoop:
 00000160  8B 75 08				mov		esi, [ebp+8]							; set esi to base address of arr
 00000163  51					push	ecx										; push ecx in order to preserve value
						; This loop compares the values within the first element of arr and the current index (incremented until arr is fully traversed.)
 00000164					CompareLoop:
 00000164  8B 5E 04					mov		ebx, [esi+4]
 00000167  39 1E					cmp		[esi], ebx							; compare current element to proceeding element by accessing esi + TYPE DWORD
 00000169  7E 02					jle		ExchangeValues
 0000016B  7F 0C					jg		Ignore

			; esi+4 is greater than esi, so push arguments and call the exchange procedure
 0000016D						ExchangeValues:
 0000016D  56							push	esi
 0000016E  8B FE						mov		edi, esi
 00000170  83 C7 04						add		edi, 4
 00000173  57							push	edi
 00000174  E8 0000000C						call	exchangeElements

							; esi is greater than esi+4, so increment esi to check next two values.
 00000179						Ignore:
 00000179  83 C6 04						add		esi, 4
 0000017C  E2 E6						loop	CompareLoop

 0000017E  59						pop		ecx
 0000017F  E2 DF					loop	ResetLoop
							
 00000181  5D				pop		ebp
 00000182  C2 0008			ret		8
 00000185			sortList ENDP

				; ------------------------------------------------------
				; exchangeElements
				;
				; A utility procedure used by sortList that given two array indexes, will swap the values held.
				; Receives: arr index 1 (by reference) and arr index 2 (by reference).
				; Returns: arr with values ar indices exchanged.
				; ------------------------------------------------------
 00000185			exchangeElements PROC
 00000185  55				push	ebp
 00000186  8B EC			mov		ebp, esp
 00000188  60				pushad												; preserve old register values

					; First store arr value that is greater (pushed as edi by sortList procedure)
 00000189  8B 45 08			mov		eax, [ebp+8]
 0000018C  8B 08			mov		ecx, [eax]

					; Next store arr value that is smaller (pushed as esi by sortList procedure)
 0000018E  8B 5D 0C			mov		ebx, [ebp+12]
 00000191  8B 13			mov		edx, [ebx]

					; Exchange values of both arr indexes
 00000193  87 D1			xchg	edx, ecx				; swap values

					; Write the swapped values into back into arr
 00000195  89 13			mov		[ebx], edx				; implement values
 00000197  89 08			mov		[eax], ecx


 00000199  61				popad												; restore old gen-purpose register values
 0000019A  5D				pop		ebp
 0000019B  C2 0008			ret		8											; return stack with original ebp

 0000019E			exchangeElements ENDP

				; ------------------------------------------------------
				; displayMedian
				;
				; This procedure finds the median of the sorted values and displays it.
				; Receives: arr by reference and request by value.
				; Returns: median value.
				; ------------------------------------------------------
 0000019E			displayMedian PROC
 0000019E  55				push	ebp
 0000019F  8B EC			mov		ebp, esp

					; Display message
 000001A1  E8 00000000 E		call	Crlf
 000001A6  BA 0000018E R		mov		edx, OFFSET medianPrompt
 000001AB  E8 00000000 E		call	WriteString	

 000001B0  8B 75 08			mov		esi, [ebp+8]								; set esi to base address of arr

					; Divide request by 2 to determine if there are an odd or even number of elements in arr
 000001B3  8B 45 0C			mov		eax, [ebp+12]								; [ebp+12] holds value of request
 000001B6  BB 00000002			mov		ebx, 2
 000001BB  33 D2			xor		edx, edx
 000001BD  F7 F3			div		ebx

					; If R=0 from previous division, then request is even. In this case, the average must be found.
 000001BF  83 FA 00			cmp		edx, 0
 000001C2  75 1D			jne		FindMedian									; odd number of elements, so immedietly print values in EAX
 000001C4  74 00			je		FindAveragedMedian							; even number, so additional calculation must be done

 000001C6				FindAveragedMedian:
						; EAX holds request /2, which can be used to find the middle value.
 000001C6  BB 00000004				mov		ebx, 4
 000001CB  F7 E3				mul		ebx
 000001CD  03 F0				add		esi, eax								; go to median value of array (or first value to be averaged, in case of even request)
 000001CF  8B 06				mov		eax, [esi]								; move value of median element to eax to be printed

						; First average the two median values
 000001D1  33 D2				xor		edx, edx
 000001D3  03 46 04				add		eax, [esi+4]							; add to next element (esi + TYPE DWORD)	
 000001D6  BB 00000002				mov		ebx, 2
 000001DB  F7 F3				div		ebx

						; Add the remainder to the result to round. If the remainder is 0, then no rounding is necessary.
						; If the remainder is 1, then we must round to the next integer
 000001DD  03 C2				add		eax, edx
 000001DF  EB 0B				jmp		ExitDisplayMedian

 000001E1				FindMedian:
						; EAX holds request /2, which can be used to find the middle value.
 000001E1  BB 00000004				mov		ebx, 4
 000001E6  F7 E3				mul		ebx
 000001E8  03 F0				add		esi, eax									; go to median value of array (or first value to be averaged, in case of even request)
 000001EA  8B 06				mov		eax, [esi]									; move value of median element to eax to be printed

 000001EC				ExitDisplayMedian:
 000001EC  E8 00000000 E			call		WriteDec
 000001F1  E8 00000000 E			call		CrLf
 000001F6  5D					pop		ebp
 000001F7  C2 0008				ret		8
 000001FA			displayMedian ENDP

				; ------------------------------------------------------
				; farewell
				;
				; Displays farewell message to user.
				; Receives: none.
				; Returns: none.
				; ------------------------------------------------------
 000001FA			farewell PROC
 000001FA  E8 00000000 E		call	Crlf
 000001FF  BA 000001B0 R		mov		edx, OFFSET goodbye
 00000204  E8 00000000 E		call	WriteString
 00000209  E8 00000000 E		call	Crlf

 0000020E  C3				ret
 0000020F			farewell ENDP


				END main
Microsoft (R) Macro Assembler Version 14.12.25835.0	    03/05/18 23:56:02
Program 5     (program5.asm				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004F8 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000020F Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayArray . . . . . . . . . .	P Near	 00000108 _TEXT	Length= 00000051 Public STDCALL
  DisplayElement . . . . . . . .	L Near	 00000128 _TEXT	
  LessThan10 . . . . . . . . . .	L Near	 00000153 _TEXT	
displayMedian  . . . . . . . . .	P Near	 0000019E _TEXT	Length= 0000005C Public STDCALL
  FindAveragedMedian . . . . . .	L Near	 000001C6 _TEXT	
  FindMedian . . . . . . . . . .	L Near	 000001E1 _TEXT	
  ExitDisplayMedian  . . . . . .	L Near	 000001EC _TEXT	
exchangeElements . . . . . . . .	P Near	 00000185 _TEXT	Length= 00000019 Public STDCALL
farewell . . . . . . . . . . . .	P Near	 000001FA _TEXT	Length= 00000015 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000E2 _TEXT	Length= 00000026 Public STDCALL
  FillArr  . . . . . . . . . . .	L Near	 000000F0 _TEXT	
  ExitFillArray  . . . . . . . .	L Near	 00000104 _TEXT	
getData  . . . . . . . . . . . .	P Near	 000000A3 _TEXT	Length= 0000003F Public STDCALL
  Begin  . . . . . . . . . . . .	L Near	 000000A9 _TEXT	
  DisplayOoR . . . . . . . . . .	L Near	 000000CD _TEXT	
  ExitGetData  . . . . . . . . .	L Near	 000000DE _TEXT	
introduction . . . . . . . . . .	P Near	 00000075 _TEXT	Length= 0000002E Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000075 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000159 _TEXT	Length= 0000002C Public STDCALL
  ResetLoop  . . . . . . . . . .	L Near	 00000160 _TEXT	
  CompareLoop  . . . . . . . . .	L Near	 00000164 _TEXT	
  ExchangeValues . . . . . . . .	L Near	 0000016D _TEXT	
  Ignore . . . . . . . . . . . .	L Near	 00000179 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 000003E7h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INPUT_MAX  . . . . . . . . . . .	Number	 000000C8h   
INPUT_MIN  . . . . . . . . . . .	Number	 0000000Ah   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000064h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUMS_PER_LINE  . . . . . . . . .	Number	 0000000Ah   
N  . . . . . . . . . . . . . . .	Number	 00000384h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arr  . . . . . . . . . . . . . .	DWord	 000001D4 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
displaySorted  . . . . . . . . .	Byte	 0000019D _DATA	
displayUnsorted  . . . . . . . .	Byte	 00000170 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000001B0 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
medianPrompt . . . . . . . . . .	Byte	 0000018E _DATA	
ooRange  . . . . . . . . . . . .	DWord	 000004F4 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 0000003A _DATA	
prompt3  . . . . . . . . . . . .	Byte	 0000007D _DATA	
prompt4  . . . . . . . . . . . .	Byte	 000000BE _DATA	
promptNum  . . . . . . . . . . .	Byte	 00000109 _DATA	
promptOoR  . . . . . . . . . . .	Byte	 0000013D _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
request  . . . . . . . . . . . .	DWord	 000001D0 _DATA	
spaces . . . . . . . . . . . . .	Byte	 000001C6 _DATA	
test1  . . . . . . . . . . . . .	Byte	 000001CB _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
